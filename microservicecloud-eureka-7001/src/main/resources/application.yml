server:
  port: 7001

eureka:
#===========自我保护模式
# 一般不建议关闭自我保护模式，因为可能因为网络堵塞等原因（服务可用）而误删了服务注册信息，使得程序不可用
# 满足了AP（高可用，容错性）
# 在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。
# 当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。
# 它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。
# 一句话讲解：好死不如赖活着
#  server:  
#    enable-self-preservation: false #禁用自我保护模式。
#==========
  instance:
    hostname: localhost #eureka服务端的实例名称
  client:
    register-with-eureka: false #false表示不向注册中心注册自己。
    fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka
      #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。 这儿使用了变量取值
      